# Cloud Build configuration for HSS Backend
# Triggers: develop branch (dev), v* tags (prod)

steps:
  # 1. Java kurulumu ve Maven dependency cache
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "☕ Java 21 kurulumu ve Maven cache..."
        
        # Java 21 kurulumu
        apt-get update && apt-get install -y openjdk-21-jdk
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # Maven dependency'lerini cache'le
        ./mvnw dependency:go-offline -B
        
        echo "✅ Java kurulumu ve Maven cache tamamlandı!"

  # 2. Test ve Build (tek step'te)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🧪 Test ve build çalıştırılıyor..."
        
        # Java environment
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # Test ve build
        ./mvnw -B clean package
        echo "✅ Test ve build başarılı!"

  # 3. Docker image build
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}:${_TAG_NAME}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}:latest'
      - '.'

  # 4. Docker image push
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}:${_TAG_NAME}'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}:latest'

  # 5. Cloud Run deploy
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        echo "🚀 Cloud Run'a deploy ediliyor..."
        
        # Cloud Run deploy
        gcloud run deploy ${_SERVICE_NAME} \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}:${_TAG_NAME} \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars=SPRING_PROFILES_ACTIVE=${_SPRING_PROFILE} \
          --set-env-vars=GCP_SQL_INSTANCE_CONNECTION_NAME=${_CONNECTION_NAME} \
          --set-secrets=DB_USERNAME=${_DB_USERNAME_SECRET}:latest,DB_PASSWORD=${_DB_PASSWORD_SECRET}:latest \
          --add-cloudsql-instances=${_CONNECTION_NAME} \
          --min-instances=${_MIN_INSTANCES} \
          --max-instances=${_MAX_INSTANCES} \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --timeout=300 \
          --concurrency=80
        
        echo "✅ Cloud Run deploy başarılı: ${_SERVICE_NAME}"

  # 6. Release artifacts oluştur (sadece prod için) 
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "📦 Release artifacts oluşturuluyor..."
          
          # Backend image referansı
          echo "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}:${_TAG_NAME}" > backend-image.txt
          
          # Manifest oluştur
          cat > manifest.json << EOF
        {
          "version": "${_VERSION}",
          "changes": ["Backend production deployment"],
          "artifacts": {
            "backend": "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}:${_TAG_NAME}",
            "frontend": "https://storage.googleapis.com/${_BUCKET_NAME}/releases/${_VERSION}/frontend/"
          },
          "forced": false,
          "channel": "prod",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
          
          # Cloud Storage'a yükle
          gsutil -m cp backend-image.txt gs://${_BUCKET_NAME}/releases/${_VERSION}/
          gsutil -m cp manifest.json gs://${_BUCKET_NAME}/releases/${_VERSION}/
          
          # Latest pointer'ını güncelle
          gsutil -m cp manifest.json gs://${_BUCKET_NAME}/releases/latest/manifest.json
          
          echo "✅ Release artifacts oluşturuldu!"
        else
          echo "ℹ️  DEV deployment - release artifacts oluşturulmadı"
        fi

  # 7. Monitoring metrics gönder
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "📊 Monitoring metrics gönderiliyor..."
        
        # Custom metric gönder
        echo '{
          "service": "hss-backend",
          "environment": "${_ENVIRONMENT}",
          "version": "${_VERSION}",
          "commit_sha": "${_TAG_NAME}",
          "deployment_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
        }' | gcloud logging write hss-deployment \
          --severity=INFO \
          --resource=global
        
        echo "✅ Monitoring metrics gönderildi!"

# Substitution variables
substitutions:
  _REGION: 'europe-west3'
  _REPO_NAME: 'hss-backend'
  _SERVICE_ACCOUNT: 'hss-backend-sa@hss-cloud-473511.iam.gserviceaccount.com'
  _CONNECTION_NAME: 'hss-cloud-473511:europe-west3:hss-sql'
  _DB_USERNAME_SECRET: 'DB_USERNAME'
  _DB_PASSWORD_SECRET: 'DB_PASSWORD'
  _ENVIRONMENT: 'dev'
  _SERVICE_NAME: 'hss-backend-dev'
  _SPRING_PROFILE: 'dev'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '2'
  _VERSION: 'dev'
  _BUCKET_NAME: 'hss-releases-hss-cloud-473511'
  _TAG_NAME: 'dev-${SHORT_SHA}'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  substitution_option: 'ALLOW_LOOSE'

# Timeout
timeout: '1200s'

# Images to be pushed to registry (automatically detected from build steps)