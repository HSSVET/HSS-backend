# Cloud Build configuration for HSS Backend
# Triggers: main branch (dev), v* tags (prod)


steps:
  # 1. Test aşaması
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🧪 Backend testleri çalıştırılıyor..."
        cd hss-backend
        ./mvnw -B test
        echo "✅ Testler başarılı!"

  # 2. Build aşaması
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔨 Backend build ediliyor..."
        cd hss-backend
        ./mvnw -B clean package -DskipTests
        echo "✅ Build başarılı!"

  # 3. Docker image build
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}'
      - 'hss-backend'

  # 4. Docker image push
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}'

  # 5. Cloud Run deploy
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Cloud Run'a deploy ediliyor..."
        
        # Environment'a göre servis adı belirle
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          SPRING_PROFILE="prod"
          MIN_INSTANCES="1"
          MAX_INSTANCES="5"
        else
          SPRING_PROFILE="dev"
          MIN_INSTANCES="0"
          MAX_INSTANCES="2"
        fi
        
        # Cloud Run deploy
        gcloud run deploy ${_SERVICE_NAME} \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA} \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars=SPRING_PROFILES_ACTIVE=$SPRING_PROFILE \
          --set-env-vars=GCP_SQL_INSTANCE_CONNECTION_NAME=${_CONNECTION_NAME} \
          --set-secrets=DB_USERNAME=${_DB_USERNAME_SECRET}:latest,DB_PASSWORD=${_DB_PASSWORD_SECRET}:latest \
          --add-cloudsql-instances=${_CONNECTION_NAME} \
          --min-instances=$MIN_INSTANCES \
          --max-instances=$MAX_INSTANCES \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --timeout=300 \
          --concurrency=80
        
        echo "✅ Cloud Run deploy başarılı: ${_SERVICE_NAME}"

  # 6. Release artifacts oluştur (sadece prod için) 

  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "📦 Release artifacts oluşturuluyor..."
          
          # Release klasörü oluştur
          VERSION=${_TAG_NAME}
          BUCKET=gs://hss-releases-${PROJECT_ID}
          
          # Backend image referansı
          echo "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}" > backend-image.txt
          
          # Manifest oluştur
          cat > manifest.json << EOF
        {
          "version": "$VERSION",
          "changes": ["Backend production deployment"],
          "artifacts": {
            "backend": "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}",
            "frontend": "https://storage.googleapis.com/hss-releases-${PROJECT_ID}/releases/$VERSION/frontend/"
          },
          "forced": false,
          "channel": "prod",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
          
          # Cloud Storage'a yükle
          gsutil -m cp backend-image.txt $BUCKET/releases/$VERSION/
          gsutil -m cp manifest.json $BUCKET/releases/$VERSION/
          
          # Latest pointer'ını güncelle
          gsutil -m cp manifest.json $BUCKET/releases/latest/manifest.json
          
          echo "✅ Release artifacts oluşturuldu!"
        else
          echo "ℹ️  DEV deployment - release artifacts oluşturulmadı"
        fi

  # 7. Monitoring metrics gönder
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "📊 Monitoring metrics gönderiliyor..."
        
        # Custom metric gönder
        gcloud logging write hss-deployment \
          "Backend deployment completed successfully" \
          --severity=INFO \
          --payload-type=json \
          --payload='{
            "service": "hss-backend",
            "environment": "${_ENVIRONMENT}",
            "version": "${_TAG_NAME}",
            "commit_sha": "${SHORT_SHA}",
            "deployment_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }'
        
        echo "✅ Monitoring metrics gönderildi!"

# Substitution variables
substitutions:
  _REGION: 'europe-west3'
  _REPO_NAME: 'hss-backend'
  _SERVICE_ACCOUNT: 'hss-backend-sa@hss-cloud-473511.iam.gserviceaccount.com'
  _CONNECTION_NAME: 'hss-cloud-473511:europe-west3:hss-sql'
  _DB_USERNAME_SECRET: 'DB_USERNAME'
  _DB_PASSWORD_SECRET: 'DB_PASSWORD'
  _ENVIRONMENT: 'dev'  # Bu değer trigger'da override edilecek
  _SERVICE_NAME: 'hss-backend-dev'  # Bu değer trigger'da override edilecek

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  substitution_option: 'ALLOW_LOOSE'

# Timeout
timeout: '1200s'

# Images to be pushed to registry
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}'
