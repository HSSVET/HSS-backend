# Cloud Build configuration for HSS Backend (SECURE)
# Triggers: develop branch (dev), v* tags (prod)
# 
# SECURITY NOTES:
# - All custom variables use underscore prefix (_) to avoid built-in substitution conflicts
# - Variable names avoid Cloud Build reserved words (DIGEST, TAG_NAME, IMAGE_NAME, etc.)
# - Safe variable names: DOCKER_IMAGE, IMAGE_TAG, IMAGE_SHA, etc.

steps:
  # 1. Debug - Değişkenleri kontrol et
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'debug-variables'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔍 Build değişkenleri kontrol ediliyor..."
        echo "PROJECT_ID: ${PROJECT_ID}"
        echo "REGION: ${_REGION}"
        echo "REPO_NAME: ${_REPO_NAME}"
        echo "TAG_NAME: ${_TAG_NAME}"
        echo "Full image path: ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}"
        
        # Artifact Registry repository'nin var olup olmadığını kontrol et
        echo "📦 Artifact Registry kontrol ediliyor..."
        gcloud artifacts repositories describe ${_REPO_NAME} \
          --location=${_REGION} \
          --format="value(name)" || echo "⚠️  Repository bulunamadı!"
        
        # Docker auth yapılandırması
        gcloud auth configure-docker ${_REGION}-docker.pkg.dev --quiet
        echo "✅ Docker auth yapılandırıldı"

  # 2. Test ve Build (Maven ile)
  - name: 'maven:3.9-eclipse-temurin-21'
    id: 'test-and-build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🧪 Test ve build çalıştırılıyor..."
        mvn -B clean package -DskipTests=false --fail-at-end
        echo "✅ Build başarılı!"
    waitFor: ['debug-variables']

  # 3. Docker image build (Doğru image adı ile)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        
        # Image adını oluştur
        DOCKER_IMAGE="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend"
        IMAGE_TAG="${_TAG_NAME}"
        
        echo "🐳 Docker image build başlıyor..."
        echo "Image: $${DOCKER_IMAGE}:$${IMAGE_TAG}"
        
        # Build
        docker build \
          --tag "$${DOCKER_IMAGE}:$${IMAGE_TAG}" \
          --tag "$${DOCKER_IMAGE}:latest" \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --build-arg VCS_REF=${COMMIT_SHA} \
          .
        
        echo "✅ Docker build başarılı!"
        
        # Image'i kontrol et
        docker images "$${DOCKER_IMAGE}"
    waitFor: ['test-and-build']

  # 4. Docker image push (Tek komutla, doğru sırayla)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        DOCKER_IMAGE="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend"
        IMAGE_TAG="${_TAG_NAME}"
        
        echo "📤 Docker image push başlıyor..."
        echo "Target: $${DOCKER_IMAGE}:$${IMAGE_TAG}"
        
        # Tag'li versiyonu push et
        echo "Pushing tagged version..."
        docker push "$${DOCKER_IMAGE}:$${IMAGE_TAG}"
        
        # Latest'i push et
        echo "Pushing latest..."
        docker push "$${DOCKER_IMAGE}:latest"
        
        echo "✅ Docker push başarılı!"
        
        # Digest'i al ve kaydet
        IMAGE_SHA=$(docker inspect --format='{{index .RepoDigests 0}}' "$${DOCKER_IMAGE}:$${IMAGE_TAG}" | cut -d'@' -f2)
        echo "Image Digest: $IMAGE_SHA"
        echo "$IMAGE_SHA" > /workspace/image-digest.txt
    waitFor: ['docker-build']

  # 5. Cloud Run deploy
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    id: 'cloud-run-deploy'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        set -euo pipefail
        
        DOCKER_IMAGE="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}"
        
        echo "🚀 Cloud Run deploy başlıyor..."
        echo "Image: $DOCKER_IMAGE"
        echo "Service: ${_SERVICE_NAME}"
        echo "Region: ${_REGION}"
        
        # Mevcut revision'ı kaydet (rollback için)
        CURRENT_REVISION=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.latestReadyRevisionName)' 2>/dev/null || echo "none")
        
        echo "📝 Mevcut revision: $CURRENT_REVISION"
        
        # Deploy
        gcloud run deploy ${_SERVICE_NAME} \
          --image="$DOCKER_IMAGE" \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="SPRING_PROFILES_ACTIVE=${_SPRING_PROFILE},DEPLOYMENT_VERSION=${_VERSION},BUILD_ID=${BUILD_ID}" \
          --set-env-vars="GCP_SQL_INSTANCE_CONNECTION_NAME=${_CONNECTION_NAME}" \
          --set-secrets="DB_USERNAME=${_DB_USERNAME_SECRET}:latest,DB_PASSWORD=${_DB_PASSWORD_SECRET}:latest" \
          --add-cloudsql-instances=${_CONNECTION_NAME} \
          --min-instances=${_MIN_INSTANCES} \
          --max-instances=${_MAX_INSTANCES} \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --timeout=300 \
          --concurrency=80 \
          --quiet
        
        # Service URL'i al
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')
        
        echo "✅ Deploy başarılı!"
        echo "🌐 Service URL: $SERVICE_URL"
        
        # Basit health check
        echo "🔍 Health check yapılıyor..."
        sleep 10  # Service'in hazır olması için bekle
        
        if curl -sf -m 30 "$SERVICE_URL/actuator/health" > /dev/null 2>&1; then
          echo "✅ Health check başarılı!"
        else
          echo "⚠️  Health check başarısız oldu, ancak deploy tamamlandı"
          echo "Manuel kontrol edin: $SERVICE_URL/actuator/health"
        fi
    waitFor: ['docker-push']

  # 6. Release artifacts (sadece prod için)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    id: 'create-artifacts'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "📦 Release artifacts oluşturuluyor..."
          
          DOCKER_IMAGE="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}"
          
          # Image digest'i al
          if [ -f /workspace/image-digest.txt ]; then
            IMAGE_SHA=$(cat /workspace/image-digest.txt)
          else
            IMAGE_SHA="unknown"
          fi
          
          # Backend image referansı
          echo "$DOCKER_IMAGE" > backend-image.txt
          
          # Manifest oluştur
          cat > manifest.json << EOF
        {
          "version": "${_VERSION}",
          "environment": "${_ENVIRONMENT}",
          "commit_sha": "${COMMIT_SHA}",
          "build_id": "${BUILD_ID}",
          "changes": ["Backend ${_ENVIRONMENT} deployment"],
          "artifacts": {
            "backend": {
              "image": "$DOCKER_IMAGE",
              "tag": "${_TAG_NAME}",
              "digest": "$IMAGE_SHA"
            }
          },
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "deployed_by": "cloud-build"
        }
        EOF
          
          # Cloud Storage'a yükle
          gsutil -m cp backend-image.txt "gs://${_BUCKET_NAME}/releases/${_VERSION}/"
          gsutil -m cp manifest.json "gs://${_BUCKET_NAME}/releases/${_VERSION}/"
          
          # Latest pointer'ını güncelle
          gsutil -m cp manifest.json "gs://${_BUCKET_NAME}/releases/latest/manifest.json"
          
          echo "✅ Release artifacts oluşturuldu: gs://${_BUCKET_NAME}/releases/${_VERSION}/"
        else
          echo "ℹ️  ${_ENVIRONMENT} environment - release artifacts atlandı"
        fi
    waitFor: ['cloud-run-deploy']

  # 7. Monitoring
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    id: 'monitoring'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        echo "📊 Deployment log kaydediliyor..."
        
        # Structured log
        cat << EOF | gcloud logging write hss-deployment \
          --severity=INFO \
          --resource=global \
          --payload-type=json
        {
          "service": "hss-backend",
          "environment": "${_ENVIRONMENT}",
          "version": "${_VERSION}",
          "commit_sha": "${COMMIT_SHA}",
          "build_id": "${BUILD_ID}",
          "tag_name": "${_TAG_NAME}",
          "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "status": "success",
          "region": "${_REGION}",
          "service_name": "${_SERVICE_NAME}"
        }
        EOF
        
        echo "✅ Deployment başarıyla tamamlandı!"
    waitFor: ['create-artifacts']

# Substitution variables
substitutions:
  _REGION: 'europe-west3'
  _REPO_NAME: 'hss-backend'  # ⚠️ KONTROL ET: Artifact Registry'deki repository adı
  _SERVICE_ACCOUNT: 'hss-backend-sa@hss-cloud-473511.iam.gserviceaccount.com'
  _CONNECTION_NAME: 'hss-cloud-473511:europe-west3:hss-sql'
  _DB_USERNAME_SECRET: 'DB_USERNAME'
  _DB_PASSWORD_SECRET: 'DB_PASSWORD'
  _ENVIRONMENT: 'dev'
  _SERVICE_NAME: 'hss-backend-dev'
  _SPRING_PROFILE: 'dev'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '2'
  _VERSION: 'dev'
  _BUCKET_NAME: 'hss-releases-hss-cloud-473511'
  _TAG_NAME: 'dev-manual'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Timeout
timeout: '1200s'